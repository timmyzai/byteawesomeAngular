//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const USER_API_BASE_URL = new InjectionToken<string>('USER_API_BASE_URL');

@Injectable()
export class RoleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(USER_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add(body: CreateRolesDto | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById(id: string | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: RolesDto | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<RolesDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/Role/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RolesDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoPagedListResponseDto>(null as any);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(USER_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById(id: string | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add(body: CreateUserDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UserDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<UserDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoPagedListResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterDto | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined): Observable<LoginResultDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResultDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResultDtoResponseDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResultDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResultDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResultDtoResponseDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getUserById(id: string | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetUserById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processGetUserById(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeUserPassword(body: ChangeUserPasswordDto | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/ChangeUserPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUserPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUserPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processChangeUserPassword(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserProfile(body: UpdateUserProfileDto | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/UpdateUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processUpdateUserProfile(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    getTwoFactorAuthInfo(userId: string | undefined): Observable<GetTwoFactorAuthInfoResultResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetTwoFactorAuthInfo?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTwoFactorAuthInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTwoFactorAuthInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetTwoFactorAuthInfoResultResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetTwoFactorAuthInfoResultResponseDto>;
        }));
    }

    protected processGetTwoFactorAuthInfo(response: HttpResponseBase): Observable<GetTwoFactorAuthInfoResultResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTwoFactorAuthInfoResultResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTwoFactorAuthInfoResultResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    enableOrDisableTwoFactorAuth(body: EnableOrDisableTwoFactorAuthDto | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/EnableOrDisableTwoFactorAuth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnableOrDisableTwoFactorAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnableOrDisableTwoFactorAuth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processEnableOrDisableTwoFactorAuth(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }

    /**
     * @param emailAddress (optional) 
     * @return Success
     */
    sendConfirmationEmail(emailAddress: string | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/SendConfirmationEmail?";
        if (emailAddress === null)
            throw new Error("The parameter 'emailAddress' cannot be null.");
        else if (emailAddress !== undefined)
            url_ += "emailAddress=" + encodeURIComponent("" + emailAddress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendConfirmationEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendConfirmationEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processSendConfirmationEmail(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    verifyConfirmationByEmail(body: VerifyEmailDto | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/VerifyConfirmationByEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyConfirmationByEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyConfirmationByEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processVerifyConfirmationByEmail(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param phoneNumber (optional) 
     * @return Success
     */
    sendConfirmationPhone(phoneNumber: string | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/SendConfirmationPhone?";
        if (phoneNumber === null)
            throw new Error("The parameter 'phoneNumber' cannot be null.");
        else if (phoneNumber !== undefined)
            url_ += "phoneNumber=" + encodeURIComponent("" + phoneNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendConfirmationPhone(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendConfirmationPhone(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processSendConfirmationPhone(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    verifyPhoneNumber(body: VerifyPhoneNumberDto | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/VerifyPhoneNumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyPhoneNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyPhoneNumber(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processVerifyPhoneNumber(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param emailAdrress (optional) 
     * @return Success
     */
    sendForgotPasswordEmail(emailAdrress: string | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/SendForgotPasswordEmail?";
        if (emailAdrress === null)
            throw new Error("The parameter 'emailAdrress' cannot be null.");
        else if (emailAdrress !== undefined)
            url_ += "emailAdrress=" + encodeURIComponent("" + emailAdrress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendForgotPasswordEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendForgotPasswordEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processSendForgotPasswordEmail(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeUserPasswordByEmail(body: ChangeUserPasswordByEmailDto | undefined): Observable<EntityUserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/ChangeUserPasswordByEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUserPasswordByEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUserPasswordByEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EntityUserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EntityUserDtoResponseDto>;
        }));
    }

    protected processChangeUserPasswordByEmail(response: HttpResponseBase): Observable<EntityUserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EntityUserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityUserDtoResponseDto>(null as any);
    }
}

export class Bo_UserDataDto implements IBo_UserDataDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    readonly displayName: string | undefined;
    kycData: KycDto;
    passWord: string | undefined;
    isActive: boolean;
    isLockedOut: boolean;
    passwordTryCount: number;
    roleNames: string[] | undefined;

    constructor(data?: IBo_UserDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailAddress = _data["emailAddress"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isEmailVerified = _data["isEmailVerified"];
            this.isPhoneVerified = _data["isPhoneVerified"];
            (<any>this).displayName = _data["displayName"];
            this.kycData = _data["kycData"] ? KycDto.fromJS(_data["kycData"]) : <any>undefined;
            this.passWord = _data["passWord"];
            this.isActive = _data["isActive"];
            this.isLockedOut = _data["isLockedOut"];
            this.passwordTryCount = _data["passwordTryCount"];
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames.push(item);
            }
        }
    }

    static fromJS(data: any): Bo_UserDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new Bo_UserDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isEmailVerified"] = this.isEmailVerified;
        data["isPhoneVerified"] = this.isPhoneVerified;
        data["displayName"] = this.displayName;
        data["kycData"] = this.kycData ? this.kycData.toJSON() : <any>undefined;
        data["passWord"] = this.passWord;
        data["isActive"] = this.isActive;
        data["isLockedOut"] = this.isLockedOut;
        data["passwordTryCount"] = this.passwordTryCount;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        return data;
    }

    clone(): Bo_UserDataDto {
        const json = this.toJSON();
        let result = new Bo_UserDataDto();
        result.init(json);
        return result;
    }
}

export interface IBo_UserDataDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    displayName: string | undefined;
    kycData: KycDto;
    passWord: string | undefined;
    isActive: boolean;
    isLockedOut: boolean;
    passwordTryCount: number;
    roleNames: string[] | undefined;
}

export class BooleanResponseDto implements IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IBooleanResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"];
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): BooleanResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): BooleanResponseDto {
        const json = this.toJSON();
        let result = new BooleanResponseDto();
        result.init(json);
        return result;
    }
}

export interface IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class ChangeUserPasswordByEmailDto implements IChangeUserPasswordByEmailDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
    tacCode: string;

    constructor(data?: IChangeUserPasswordByEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
            this.tacCode = _data["tacCode"];
        }
    }

    static fromJS(data: any): ChangeUserPasswordByEmailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserPasswordByEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        data["tacCode"] = this.tacCode;
        return data;
    }

    clone(): ChangeUserPasswordByEmailDto {
        const json = this.toJSON();
        let result = new ChangeUserPasswordByEmailDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserPasswordByEmailDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
    tacCode: string;
}

export class ChangeUserPasswordDto implements IChangeUserPasswordDto {
    email: string;
    newPassword: string;
    confirmPassword: string;

    constructor(data?: IChangeUserPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): ChangeUserPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }

    clone(): ChangeUserPasswordDto {
        const json = this.toJSON();
        let result = new ChangeUserPasswordDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserPasswordDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
}

export class CreateRolesDto implements ICreateRolesDto {
    name: string | undefined;
    description: string | undefined;

    constructor(data?: ICreateRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }

    clone(): CreateRolesDto {
        const json = this.toJSON();
        let result = new CreateRolesDto();
        result.init(json);
        return result;
    }
}

export interface ICreateRolesDto {
    name: string | undefined;
    description: string | undefined;
}

export class CreateUserDto implements ICreateUserDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    passWord: string;
    roleIdList: string[] | undefined;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailAddress = _data["emailAddress"];
            this.passWord = _data["passWord"];
            if (Array.isArray(_data["roleIdList"])) {
                this.roleIdList = [] as any;
                for (let item of _data["roleIdList"])
                    this.roleIdList.push(item);
            }
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["passWord"] = this.passWord;
        if (Array.isArray(this.roleIdList)) {
            data["roleIdList"] = [];
            for (let item of this.roleIdList)
                data["roleIdList"].push(item);
        }
        return data;
    }

    clone(): CreateUserDto {
        const json = this.toJSON();
        let result = new CreateUserDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUserDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    passWord: string;
    roleIdList: string[] | undefined;
}

export class EnableOrDisableTwoFactorAuthDto implements IEnableOrDisableTwoFactorAuthDto {
    userId: string;
    enable: boolean;
    twoFactorPin: string;

    constructor(data?: IEnableOrDisableTwoFactorAuthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.enable = _data["enable"];
            this.twoFactorPin = _data["twoFactorPin"];
        }
    }

    static fromJS(data: any): EnableOrDisableTwoFactorAuthDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnableOrDisableTwoFactorAuthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["enable"] = this.enable;
        data["twoFactorPin"] = this.twoFactorPin;
        return data;
    }

    clone(): EnableOrDisableTwoFactorAuthDto {
        const json = this.toJSON();
        let result = new EnableOrDisableTwoFactorAuthDto();
        result.init(json);
        return result;
    }
}

export interface IEnableOrDisableTwoFactorAuthDto {
    userId: string;
    enable: boolean;
    twoFactorPin: string;
}

export class EntityUserDto implements IEntityUserDto {
    id: string;
    userData: UserDataDto;

    constructor(data?: IEntityUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userData = _data["userData"] ? UserDataDto.fromJS(_data["userData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EntityUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userData"] = this.userData ? this.userData.toJSON() : <any>undefined;
        return data;
    }

    clone(): EntityUserDto {
        const json = this.toJSON();
        let result = new EntityUserDto();
        result.init(json);
        return result;
    }
}

export interface IEntityUserDto {
    id: string;
    userData: UserDataDto;
}

export class EntityUserDtoResponseDto implements IEntityUserDtoResponseDto {
    isSuccess: boolean;
    result: EntityUserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IEntityUserDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? EntityUserDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): EntityUserDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityUserDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): EntityUserDtoResponseDto {
        const json = this.toJSON();
        let result = new EntityUserDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IEntityUserDtoResponseDto {
    isSuccess: boolean;
    result: EntityUserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class GetTwoFactorAuthInfoResult implements IGetTwoFactorAuthInfoResult {
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;

    constructor(data?: IGetTwoFactorAuthInfoResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.twoFactorSecretKey = _data["twoFactorSecretKey"];
            this.twoFactorQrImgUrl = _data["twoFactorQrImgUrl"];
        }
    }

    static fromJS(data: any): GetTwoFactorAuthInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetTwoFactorAuthInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["twoFactorSecretKey"] = this.twoFactorSecretKey;
        data["twoFactorQrImgUrl"] = this.twoFactorQrImgUrl;
        return data;
    }

    clone(): GetTwoFactorAuthInfoResult {
        const json = this.toJSON();
        let result = new GetTwoFactorAuthInfoResult();
        result.init(json);
        return result;
    }
}

export interface IGetTwoFactorAuthInfoResult {
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;
}

export class GetTwoFactorAuthInfoResultResponseDto implements IGetTwoFactorAuthInfoResultResponseDto {
    isSuccess: boolean;
    result: GetTwoFactorAuthInfoResult;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IGetTwoFactorAuthInfoResultResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? GetTwoFactorAuthInfoResult.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): GetTwoFactorAuthInfoResultResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTwoFactorAuthInfoResultResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): GetTwoFactorAuthInfoResultResponseDto {
        const json = this.toJSON();
        let result = new GetTwoFactorAuthInfoResultResponseDto();
        result.init(json);
        return result;
    }
}

export interface IGetTwoFactorAuthInfoResultResponseDto {
    isSuccess: boolean;
    result: GetTwoFactorAuthInfoResult;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class KycDto implements IKycDto {
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;

    constructor(data?: IKycDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kycApprovedDate = _data["kycApprovedDate"] ? DateTime.fromISO(_data["kycApprovedDate"].toString()) : <any>undefined;
            this.isKYCApproved = _data["isKYCApproved"];
        }
    }

    static fromJS(data: any): KycDto {
        data = typeof data === 'object' ? data : {};
        let result = new KycDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kycApprovedDate"] = this.kycApprovedDate ? this.kycApprovedDate.toString() : <any>undefined;
        data["isKYCApproved"] = this.isKYCApproved;
        return data;
    }

    clone(): KycDto {
        const json = this.toJSON();
        let result = new KycDto();
        result.init(json);
        return result;
    }
}

export interface IKycDto {
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;
}

export class LoginDto implements ILoginDto {
    userLoginIdentityAddress: string | undefined;
    password: string | undefined;
    twoFactorPin: string | undefined;
    emailTacCode: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userLoginIdentityAddress = _data["userLoginIdentityAddress"];
            this.password = _data["password"];
            this.twoFactorPin = _data["twoFactorPin"];
            this.emailTacCode = _data["emailTacCode"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userLoginIdentityAddress"] = this.userLoginIdentityAddress;
        data["password"] = this.password;
        data["twoFactorPin"] = this.twoFactorPin;
        data["emailTacCode"] = this.emailTacCode;
        return data;
    }

    clone(): LoginDto {
        const json = this.toJSON();
        let result = new LoginDto();
        result.init(json);
        return result;
    }
}

export interface ILoginDto {
    userLoginIdentityAddress: string | undefined;
    password: string | undefined;
    twoFactorPin: string | undefined;
    emailTacCode: string | undefined;
}

export class LoginResultDto implements ILoginResultDto {
    userId: string;
    loginResult: LoginResultType;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;

    constructor(data?: ILoginResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.loginResult = _data["loginResult"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
        }
    }

    static fromJS(data: any): LoginResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["loginResult"] = this.loginResult;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    }

    clone(): LoginResultDto {
        const json = this.toJSON();
        let result = new LoginResultDto();
        result.init(json);
        return result;
    }
}

export interface ILoginResultDto {
    userId: string;
    loginResult: LoginResultType;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
}

export class LoginResultDtoResponseDto implements ILoginResultDtoResponseDto {
    isSuccess: boolean;
    result: LoginResultDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: ILoginResultDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? LoginResultDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): LoginResultDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): LoginResultDtoResponseDto {
        const json = this.toJSON();
        let result = new LoginResultDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface ILoginResultDtoResponseDto {
    isSuccess: boolean;
    result: LoginResultDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export enum LoginResultType {
    Success = 1,
    InvalidUserLoginIdentity = 2,
    InvalidPassword = 3,
    UserIsNotActive = 4,
    LockedOut = 5,
    RequireOtpToVerifyEmail = 6,
    RequireTwoFactorPin = 7,
}

export class RegisterDto implements IRegisterDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    passWord: string;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailAddress = _data["emailAddress"];
            this.passWord = _data["passWord"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["passWord"] = this.passWord;
        return data;
    }

    clone(): RegisterDto {
        const json = this.toJSON();
        let result = new RegisterDto();
        result.init(json);
        return result;
    }
}

export interface IRegisterDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    passWord: string;
}

export class RolesDto implements IRolesDto {
    id: string;
    createdBy: string | undefined;
    createdTime: DateTime;
    lastModifiedBy: string | undefined;
    lastModifiedTime: DateTime | undefined;
    isDeleted: boolean;
    deletedBy: string | undefined;
    deletedTime: DateTime | undefined;
    name: string | undefined;
    description: string | undefined;

    constructor(data?: IRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.createdTime = _data["createdTime"] ? DateTime.fromISO(_data["createdTime"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedTime = _data["lastModifiedTime"] ? DateTime.fromISO(_data["lastModifiedTime"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.deletedBy = _data["deletedBy"];
            this.deletedTime = _data["deletedTime"] ? DateTime.fromISO(_data["deletedTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["createdTime"] = this.createdTime ? this.createdTime.toString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedTime"] = this.deletedTime ? this.deletedTime.toString() : <any>undefined;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }

    clone(): RolesDto {
        const json = this.toJSON();
        let result = new RolesDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDto {
    id: string;
    createdBy: string | undefined;
    createdTime: DateTime;
    lastModifiedBy: string | undefined;
    lastModifiedTime: DateTime | undefined;
    isDeleted: boolean;
    deletedBy: string | undefined;
    deletedTime: DateTime | undefined;
    name: string | undefined;
    description: string | undefined;
}

export class RolesDtoPagedListResponseDto implements IRolesDtoPagedListResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IRolesDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(RolesDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): RolesDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): RolesDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new RolesDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDtoPagedListResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class RolesDtoResponseDto implements IRolesDtoResponseDto {
    isSuccess: boolean;
    result: RolesDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IRolesDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? RolesDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): RolesDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): RolesDtoResponseDto {
        const json = this.toJSON();
        let result = new RolesDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDtoResponseDto {
    isSuccess: boolean;
    result: RolesDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UpdateUserProfileDto implements IUpdateUserProfileDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    userId: string;

    constructor(data?: IUpdateUserProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailAddress = _data["emailAddress"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): UpdateUserProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["userId"] = this.userId;
        return data;
    }

    clone(): UpdateUserProfileDto {
        const json = this.toJSON();
        let result = new UpdateUserProfileDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserProfileDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    userId: string;
}

export class UserDataDto implements IUserDataDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    readonly displayName: string | undefined;
    kycData: KycDto;

    constructor(data?: IUserDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailAddress = _data["emailAddress"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isEmailVerified = _data["isEmailVerified"];
            this.isPhoneVerified = _data["isPhoneVerified"];
            (<any>this).displayName = _data["displayName"];
            this.kycData = _data["kycData"] ? KycDto.fromJS(_data["kycData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isEmailVerified"] = this.isEmailVerified;
        data["isPhoneVerified"] = this.isPhoneVerified;
        data["displayName"] = this.displayName;
        data["kycData"] = this.kycData ? this.kycData.toJSON() : <any>undefined;
        return data;
    }

    clone(): UserDataDto {
        const json = this.toJSON();
        let result = new UserDataDto();
        result.init(json);
        return result;
    }
}

export interface IUserDataDto {
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string | undefined;
    emailAddress: string;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    displayName: string | undefined;
    kycData: KycDto;
}

export class UserDto implements IUserDto {
    id: string;
    createdBy: string | undefined;
    createdTime: DateTime;
    lastModifiedBy: string | undefined;
    lastModifiedTime: DateTime | undefined;
    isDeleted: boolean;
    deletedBy: string | undefined;
    deletedTime: DateTime | undefined;
    userData: Bo_UserDataDto;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.createdTime = _data["createdTime"] ? DateTime.fromISO(_data["createdTime"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedTime = _data["lastModifiedTime"] ? DateTime.fromISO(_data["lastModifiedTime"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.deletedBy = _data["deletedBy"];
            this.deletedTime = _data["deletedTime"] ? DateTime.fromISO(_data["deletedTime"].toString()) : <any>undefined;
            this.userData = _data["userData"] ? Bo_UserDataDto.fromJS(_data["userData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["createdTime"] = this.createdTime ? this.createdTime.toString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedTime"] = this.deletedTime ? this.deletedTime.toString() : <any>undefined;
        data["userData"] = this.userData ? this.userData.toJSON() : <any>undefined;
        return data;
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: string;
    createdBy: string | undefined;
    createdTime: DateTime;
    lastModifiedBy: string | undefined;
    lastModifiedTime: DateTime | undefined;
    isDeleted: boolean;
    deletedBy: string | undefined;
    deletedTime: DateTime | undefined;
    userData: Bo_UserDataDto;
}

export class UserDtoPagedListResponseDto implements IUserDtoPagedListResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IUserDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(UserDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): UserDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): UserDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new UserDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoPagedListResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UserDtoResponseDto implements IUserDtoResponseDto {
    isSuccess: boolean;
    result: UserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IUserDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? UserDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): UserDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): UserDtoResponseDto {
        const json = this.toJSON();
        let result = new UserDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoResponseDto {
    isSuccess: boolean;
    result: UserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class VerifyEmailDto implements IVerifyEmailDto {
    email: string;
    tacCode: string;

    constructor(data?: IVerifyEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.tacCode = _data["tacCode"];
        }
    }

    static fromJS(data: any): VerifyEmailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["tacCode"] = this.tacCode;
        return data;
    }

    clone(): VerifyEmailDto {
        const json = this.toJSON();
        let result = new VerifyEmailDto();
        result.init(json);
        return result;
    }
}

export interface IVerifyEmailDto {
    email: string;
    tacCode: string;
}

export class VerifyPhoneNumberDto implements IVerifyPhoneNumberDto {
    phoneNumber: string;
    tacCode: string;

    constructor(data?: IVerifyPhoneNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.tacCode = _data["tacCode"];
        }
    }

    static fromJS(data: any): VerifyPhoneNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyPhoneNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["tacCode"] = this.tacCode;
        return data;
    }

    clone(): VerifyPhoneNumberDto {
        const json = this.toJSON();
        let result = new VerifyPhoneNumberDto();
        result.init(json);
        return result;
    }
}

export interface IVerifyPhoneNumberDto {
    phoneNumber: string;
    tacCode: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}