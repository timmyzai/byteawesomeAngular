//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const USER_API_BASE_URL = new InjectionToken<string>('USER_API_BASE_URL');

@Injectable()
export class OtpGrpcClientServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(USER_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param email (optional) 
     * @param type (optional) 
     * @return Success
     */
    add(email: string | undefined, type: OtpProtoType | undefined): Observable<OtpDto> {
        let url_ = this.baseUrl + "/api/OtpGrpcClient/Add?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<OtpDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDto>(null as any);
    }

    /**
     * @param email (optional) 
     * @param tacCode (optional) 
     * @return Success
     */
    verify(email: string | undefined, tacCode: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/OtpGrpcClient/Verify?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (tacCode === null)
            throw new Error("The parameter 'tacCode' cannot be null.");
        else if (tacCode !== undefined)
            url_ += "TacCode=" + encodeURIComponent("" + tacCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerify(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerify(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processVerify(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(USER_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add(body: CreateRolesDto | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param roleName (optional) 
     * @return Success
     */
    getRoleByName(roleName: string | undefined, name: string): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/GetRoleByName/{name}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        if (roleName === null)
            throw new Error("The parameter 'roleName' cannot be null.");
        else if (roleName !== undefined)
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processGetRoleByName(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    get(): Observable<RolesDtoIEnumerableResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoIEnumerableResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoIEnumerableResponseDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RolesDtoIEnumerableResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoIEnumerableResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoIEnumerableResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    getById(id: string): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: RolesDto | undefined): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<RolesDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Role/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RolesDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<RolesDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/Role/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RolesDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RolesDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RolesDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RolesDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolesDtoPagedListResponseDto>(null as any);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(USER_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: CreateUserDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param userLoginIdentityAddress (optional) 
     * @param password (optional) 
     * @return Success
     */
    login(userLoginIdentityAddress: string | undefined, password: string | undefined): Observable<LoginResultDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Login?";
        if (userLoginIdentityAddress === null)
            throw new Error("The parameter 'userLoginIdentityAddress' cannot be null.");
        else if (userLoginIdentityAddress !== undefined)
            url_ += "userLoginIdentityAddress=" + encodeURIComponent("" + userLoginIdentityAddress) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResultDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResultDtoResponseDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResultDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResultDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResultDtoResponseDto>(null as any);
    }

    /**
     * @param userName (optional) 
     * @return Success
     */
    getUserByUserLoginIdentity(userName: string | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetUserByUserLoginIdentity?";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserByUserLoginIdentity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserByUserLoginIdentity(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processGetUserByUserLoginIdentity(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeUserPassword(body: ChangeUserPasswordDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/ChangeUserPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUserPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUserPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processChangeUserPassword(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param emailAdrress (optional) 
     * @return Success
     */
    sendConfirmationEmail(emailAdrress: string | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/SendConfirmationEmail?";
        if (emailAdrress === null)
            throw new Error("The parameter 'emailAdrress' cannot be null.");
        else if (emailAdrress !== undefined)
            url_ += "emailAdrress=" + encodeURIComponent("" + emailAdrress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendConfirmationEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendConfirmationEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processSendConfirmationEmail(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    verifyConfirmationByEmail(body: VerifyConfirmationByEmailDto | undefined): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/User/VerifyConfirmationByEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyConfirmationByEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyConfirmationByEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processVerifyConfirmationByEmail(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param emailAdrress (optional) 
     * @return Success
     */
    sendForgotPasswordEmail(emailAdrress: string | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/SendForgotPasswordEmail?";
        if (emailAdrress === null)
            throw new Error("The parameter 'emailAdrress' cannot be null.");
        else if (emailAdrress !== undefined)
            url_ += "emailAdrress=" + encodeURIComponent("" + emailAdrress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendForgotPasswordEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendForgotPasswordEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processSendForgotPasswordEmail(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeUserPasswordByEmail(body: ChangeUserPasswordByEmailDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/ChangeUserPasswordByEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeUserPasswordByEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeUserPasswordByEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processChangeUserPasswordByEmail(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    get(): Observable<UserDtoIEnumerableResponseDto> {
        let url_ = this.baseUrl + "/api/User/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoIEnumerableResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoIEnumerableResponseDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserDtoIEnumerableResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoIEnumerableResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoIEnumerableResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    getById(id: string): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UserDto | undefined): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<UserDtoResponseDto> {
        let url_ = this.baseUrl + "/api/User/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<UserDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<UserDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/User/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDtoPagedListResponseDto>(null as any);
    }
}

export class BooleanResponseDto implements IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IBooleanResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"];
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): BooleanResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): BooleanResponseDto {
        const json = this.toJSON();
        let result = new BooleanResponseDto();
        result.init(json);
        return result;
    }
}

export interface IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class ChangeUserPasswordByEmailDto implements IChangeUserPasswordByEmailDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
    tacCode: string;

    constructor(data?: IChangeUserPasswordByEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
            this.tacCode = _data["tacCode"];
        }
    }

    static fromJS(data: any): ChangeUserPasswordByEmailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserPasswordByEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        data["tacCode"] = this.tacCode;
        return data;
    }

    clone(): ChangeUserPasswordByEmailDto {
        const json = this.toJSON();
        let result = new ChangeUserPasswordByEmailDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserPasswordByEmailDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
    tacCode: string;
}

export class ChangeUserPasswordDto implements IChangeUserPasswordDto {
    email: string;
    newPassword: string;
    confirmPassword: string;

    constructor(data?: IChangeUserPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): ChangeUserPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }

    clone(): ChangeUserPasswordDto {
        const json = this.toJSON();
        let result = new ChangeUserPasswordDto();
        result.init(json);
        return result;
    }
}

export interface IChangeUserPasswordDto {
    email: string;
    newPassword: string;
    confirmPassword: string;
}

export class CreateRolesDto implements ICreateRolesDto {
    name: string | undefined;
    description: string | undefined;

    constructor(data?: ICreateRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }

    clone(): CreateRolesDto {
        const json = this.toJSON();
        let result = new CreateRolesDto();
        result.init(json);
        return result;
    }
}

export interface ICreateRolesDto {
    name: string | undefined;
    description: string | undefined;
}

export class CreateUserDto implements ICreateUserDto {
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    passWord: string;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.passWord = _data["passWord"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["passWord"] = this.passWord;
        return data;
    }

    clone(): CreateUserDto {
        const json = this.toJSON();
        let result = new CreateUserDto();
        result.init(json);
        return result;
    }
}

export interface ICreateUserDto {
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    passWord: string;
}

export class LoginResultDto implements ILoginResultDto {
    result: LoginResultType;
    user: UserDto;

    constructor(data?: ILoginResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LoginResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }

    clone(): LoginResultDto {
        const json = this.toJSON();
        let result = new LoginResultDto();
        result.init(json);
        return result;
    }
}

export interface ILoginResultDto {
    result: LoginResultType;
    user: UserDto;
}

export class LoginResultDtoResponseDto implements ILoginResultDtoResponseDto {
    isSuccess: boolean;
    result: LoginResultDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: ILoginResultDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? LoginResultDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): LoginResultDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): LoginResultDtoResponseDto {
        const json = this.toJSON();
        let result = new LoginResultDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface ILoginResultDtoResponseDto {
    isSuccess: boolean;
    result: LoginResultDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export enum LoginResultType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class OtpDto implements IOtpDto {
    id: number;
    email: string | undefined;
    tacCode: string | undefined;
    type: OtpType;

    constructor(data?: IOtpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.tacCode = _data["tacCode"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): OtpDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["tacCode"] = this.tacCode;
        data["type"] = this.type;
        return data;
    }

    clone(): OtpDto {
        const json = this.toJSON();
        let result = new OtpDto();
        result.init(json);
        return result;
    }
}

export interface IOtpDto {
    id: number;
    email: string | undefined;
    tacCode: string | undefined;
    type: OtpType;
}

export enum OtpProtoType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum OtpType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class RolesDto implements IRolesDto {
    id: string;
    name: string | undefined;
    description: string | undefined;

    constructor(data?: IRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }

    clone(): RolesDto {
        const json = this.toJSON();
        let result = new RolesDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDto {
    id: string;
    name: string | undefined;
    description: string | undefined;
}

export class RolesDtoIEnumerableResponseDto implements IRolesDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IRolesDtoIEnumerableResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(RolesDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): RolesDtoIEnumerableResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDtoIEnumerableResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): RolesDtoIEnumerableResponseDto {
        const json = this.toJSON();
        let result = new RolesDtoIEnumerableResponseDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class RolesDtoPagedListResponseDto implements IRolesDtoPagedListResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IRolesDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(RolesDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): RolesDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): RolesDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new RolesDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDtoPagedListResponseDto {
    isSuccess: boolean;
    result: RolesDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class RolesDtoResponseDto implements IRolesDtoResponseDto {
    isSuccess: boolean;
    result: RolesDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IRolesDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? RolesDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): RolesDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): RolesDtoResponseDto {
        const json = this.toJSON();
        let result = new RolesDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDtoResponseDto {
    isSuccess: boolean;
    result: RolesDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UserDto implements IUserDto {
    id: string;
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    passWord: string;
    passwordSalt: string | undefined;
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    isActive: boolean;
    isLockedOut: boolean;
    readonly displayName: string | undefined;
    roles: RolesDto[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.passWord = _data["passWord"];
            this.passwordSalt = _data["passwordSalt"];
            this.kycApprovedDate = _data["kycApprovedDate"] ? DateTime.fromISO(_data["kycApprovedDate"].toString()) : <any>undefined;
            this.isKYCApproved = _data["isKYCApproved"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isEmailVerified = _data["isEmailVerified"];
            this.isPhoneVerified = _data["isPhoneVerified"];
            this.isActive = _data["isActive"];
            this.isLockedOut = _data["isLockedOut"];
            (<any>this).displayName = _data["displayName"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles.push(RolesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["passWord"] = this.passWord;
        data["passwordSalt"] = this.passwordSalt;
        data["kycApprovedDate"] = this.kycApprovedDate ? this.kycApprovedDate.toString() : <any>undefined;
        data["isKYCApproved"] = this.isKYCApproved;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isEmailVerified"] = this.isEmailVerified;
        data["isPhoneVerified"] = this.isPhoneVerified;
        data["isActive"] = this.isActive;
        data["isLockedOut"] = this.isLockedOut;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data;
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: string;
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    passWord: string;
    passwordSalt: string | undefined;
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    isActive: boolean;
    isLockedOut: boolean;
    displayName: string | undefined;
    roles: RolesDto[] | undefined;
}

export class UserDtoIEnumerableResponseDto implements IUserDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IUserDtoIEnumerableResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(UserDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): UserDtoIEnumerableResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoIEnumerableResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): UserDtoIEnumerableResponseDto {
        const json = this.toJSON();
        let result = new UserDtoIEnumerableResponseDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UserDtoPagedListResponseDto implements IUserDtoPagedListResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IUserDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(UserDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): UserDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): UserDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new UserDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoPagedListResponseDto {
    isSuccess: boolean;
    result: UserDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UserDtoResponseDto implements IUserDtoResponseDto {
    isSuccess: boolean;
    result: UserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IUserDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? UserDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): UserDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): UserDtoResponseDto {
        const json = this.toJSON();
        let result = new UserDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IUserDtoResponseDto {
    isSuccess: boolean;
    result: UserDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class VerifyConfirmationByEmailDto implements IVerifyConfirmationByEmailDto {
    email: string;
    tacCode: string;

    constructor(data?: IVerifyConfirmationByEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.tacCode = _data["tacCode"];
        }
    }

    static fromJS(data: any): VerifyConfirmationByEmailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyConfirmationByEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["tacCode"] = this.tacCode;
        return data;
    }

    clone(): VerifyConfirmationByEmailDto {
        const json = this.toJSON();
        let result = new VerifyConfirmationByEmailDto();
        result.init(json);
        return result;
    }
}

export interface IVerifyConfirmationByEmailDto {
    email: string;
    tacCode: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}