//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const AUTH_API_BASE_URL = new InjectionToken<string>('AUTH_API_BASE_URL');

@Injectable()
export class AuthenticationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTH_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    authenticate(body: AuthenticateModel | undefined): Observable<AuthenticateResultModelResponseDto> {
        let url_ = this.baseUrl + "/api/Authentication/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticateResultModelResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticateResultModelResponseDto>;
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModelResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResultModelResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModelResponseDto>(null as any);
    }
}

@Injectable()
export class OtpServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTH_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    verifyOTP(email: string, tacCode: string): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/VerifyOTP?";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (tacCode === undefined || tacCode === null)
            throw new Error("The parameter 'tacCode' must be defined and cannot be null.");
        else
            url_ += "TacCode=" + encodeURIComponent("" + tacCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyOTP(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyOTP(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processVerifyOTP(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    get(): Observable<OtpDtoIEnumerableResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoIEnumerableResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoIEnumerableResponseDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OtpDtoIEnumerableResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoIEnumerableResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoIEnumerableResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    getById(id: number): Observable<OtpDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<OtpDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add(body: CreateOtpDto | undefined): Observable<OtpDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoResponseDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<OtpDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: OtpDto | undefined): Observable<OtpDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<OtpDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<OtpDtoResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<OtpDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<OtpDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/Otp/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OtpDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OtpDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OtpDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OtpDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OtpDtoPagedListResponseDto>(null as any);
    }
}

@Injectable()
export class TwoFactorAuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTH_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createOrUpdateTwoFactorAuth(): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/CreateOrUpdateTwoFactorAuth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateTwoFactorAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateTwoFactorAuth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processCreateOrUpdateTwoFactorAuth(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    validateTwoFactorPIN(userId: string, twoFactorPin: string): Observable<BooleanResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/ValidateTwoFactorPIN?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (twoFactorPin === undefined || twoFactorPin === null)
            throw new Error("The parameter 'twoFactorPin' must be defined and cannot be null.");
        else
            url_ += "TwoFactorPin=" + encodeURIComponent("" + twoFactorPin) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidateTwoFactorPIN(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateTwoFactorPIN(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanResponseDto>;
        }));
    }

    protected processValidateTwoFactorPIN(response: HttpResponseBase): Observable<BooleanResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanResponseDto>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    getByUserId(userId: string | undefined): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/GetByUserId?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByUserId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByUserId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processGetByUserId(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    get(): Observable<TwoFactorAuthDtoIEnumerableResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoIEnumerableResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoIEnumerableResponseDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TwoFactorAuthDtoIEnumerableResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoIEnumerableResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoIEnumerableResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    getById(id: string): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/GetById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add(body: CreateTwoFactorAuthDto | undefined): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: TwoFactorAuthDto | undefined): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<TwoFactorAuthDtoResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoResponseDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<TwoFactorAuthDtoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoResponseDto>(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    getAll(pageNumber: number | undefined, pageSize: number | undefined): Observable<TwoFactorAuthDtoPagedListResponseDto> {
        let url_ = this.baseUrl + "/api/TwoFactorAuth/GetAll?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TwoFactorAuthDtoPagedListResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TwoFactorAuthDtoPagedListResponseDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<TwoFactorAuthDtoPagedListResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorAuthDtoPagedListResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TwoFactorAuthDtoPagedListResponseDto>(null as any);
    }
}

@Injectable()
export class UserGrpcClientServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(AUTH_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getAllUsers(request: Empty | undefined): Observable<UserDto[]> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/GetAllUsers?";
        if (request === null)
            throw new Error("The parameter 'request' cannot be null.");
        else if (request !== undefined)
            url_ += "request=" + encodeURIComponent("" + request) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto[]>;
        }));
    }

    protected processGetAllUsers(response: HttpResponseBase): Observable<UserDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto[]>([null as any]);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getUserById(id: string | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/GetUserById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processGetUserById(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto>(null as any);
    }

    /**
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param userName (optional) 
     * @param emailAddress (optional) 
     * @param passWord (optional) 
     * @return Success
     */
    addUser(firstName: string | undefined, lastName: string | undefined, userName: string | undefined, emailAddress: string | undefined, passWord: string | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/AddUser?";
        if (firstName === null)
            throw new Error("The parameter 'firstName' cannot be null.");
        else if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName === null)
            throw new Error("The parameter 'lastName' cannot be null.");
        else if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
        if (emailAddress === null)
            throw new Error("The parameter 'emailAddress' cannot be null.");
        else if (emailAddress !== undefined)
            url_ += "EmailAddress=" + encodeURIComponent("" + emailAddress) + "&";
        if (passWord === null)
            throw new Error("The parameter 'passWord' cannot be null.");
        else if (passWord !== undefined)
            url_ += "PassWord=" + encodeURIComponent("" + passWord) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processAddUser(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteUser(id: string | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/DeleteUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param userName (optional) 
     * @param emailAddress (optional) 
     * @param passWord (optional) 
     * @param kycApprovedDate_Seconds (optional) 
     * @param kycApprovedDate_Nanos (optional) 
     * @param isKycApproved (optional) 
     * @param isTwoFactorEnabled (optional) 
     * @param isActive (optional) 
     * @param isLockedOut (optional) 
     * @param displayName (optional) 
     * @param roles (optional) 
     * @param isEmailVerified (optional) 
     * @param errorMessage (optional) 
     * @return Success
     */
    updateUser(id: string | undefined, firstName: string | undefined, lastName: string | undefined, userName: string | undefined, emailAddress: string | undefined, passWord: string | undefined, kycApprovedDate_Seconds: number | undefined, kycApprovedDate_Nanos: number | undefined, isKycApproved: boolean | undefined, isTwoFactorEnabled: boolean | undefined, isActive: boolean | undefined, isLockedOut: boolean | undefined, displayName: string | undefined, roles: RolesProtoDto[] | undefined, isEmailVerified: boolean | undefined, errorMessage: string | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/UpdateUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (firstName === null)
            throw new Error("The parameter 'firstName' cannot be null.");
        else if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName === null)
            throw new Error("The parameter 'lastName' cannot be null.");
        else if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
        if (emailAddress === null)
            throw new Error("The parameter 'emailAddress' cannot be null.");
        else if (emailAddress !== undefined)
            url_ += "EmailAddress=" + encodeURIComponent("" + emailAddress) + "&";
        if (passWord === null)
            throw new Error("The parameter 'passWord' cannot be null.");
        else if (passWord !== undefined)
            url_ += "PassWord=" + encodeURIComponent("" + passWord) + "&";
        if (kycApprovedDate_Seconds === null)
            throw new Error("The parameter 'kycApprovedDate_Seconds' cannot be null.");
        else if (kycApprovedDate_Seconds !== undefined)
            url_ += "KycApprovedDate.Seconds=" + encodeURIComponent("" + kycApprovedDate_Seconds) + "&";
        if (kycApprovedDate_Nanos === null)
            throw new Error("The parameter 'kycApprovedDate_Nanos' cannot be null.");
        else if (kycApprovedDate_Nanos !== undefined)
            url_ += "KycApprovedDate.Nanos=" + encodeURIComponent("" + kycApprovedDate_Nanos) + "&";
        if (isKycApproved === null)
            throw new Error("The parameter 'isKycApproved' cannot be null.");
        else if (isKycApproved !== undefined)
            url_ += "IsKycApproved=" + encodeURIComponent("" + isKycApproved) + "&";
        if (isTwoFactorEnabled === null)
            throw new Error("The parameter 'isTwoFactorEnabled' cannot be null.");
        else if (isTwoFactorEnabled !== undefined)
            url_ += "IsTwoFactorEnabled=" + encodeURIComponent("" + isTwoFactorEnabled) + "&";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
        if (isLockedOut === null)
            throw new Error("The parameter 'isLockedOut' cannot be null.");
        else if (isLockedOut !== undefined)
            url_ += "IsLockedOut=" + encodeURIComponent("" + isLockedOut) + "&";
        if (displayName === null)
            throw new Error("The parameter 'displayName' cannot be null.");
        else if (displayName !== undefined)
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&";
        if (roles === null)
            throw new Error("The parameter 'roles' cannot be null.");
        else if (roles !== undefined)
            roles && roles.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Roles[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        if (isEmailVerified === null)
            throw new Error("The parameter 'isEmailVerified' cannot be null.");
        else if (isEmailVerified !== undefined)
            url_ += "IsEmailVerified=" + encodeURIComponent("" + isEmailVerified) + "&";
        if (errorMessage === null)
            throw new Error("The parameter 'errorMessage' cannot be null.");
        else if (errorMessage !== undefined)
            url_ += "ErrorMessage=" + encodeURIComponent("" + errorMessage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto>(null as any);
    }

    /**
     * @param userLoginIdentity (optional) 
     * @param password (optional) 
     * @return Success
     */
    validateUserCredentials(userLoginIdentity: string | undefined, password: string | undefined): Observable<LoginResultDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/ValidateUserCredentials?";
        if (userLoginIdentity === null)
            throw new Error("The parameter 'userLoginIdentity' cannot be null.");
        else if (userLoginIdentity !== undefined)
            url_ += "UserLoginIdentity=" + encodeURIComponent("" + userLoginIdentity) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidateUserCredentials(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateUserCredentials(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResultDto>;
        }));
    }

    protected processValidateUserCredentials(response: HttpResponseBase): Observable<LoginResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResultDto>(null as any);
    }

    /**
     * @param userLoginIdentity (optional) 
     * @return Success
     */
    getUserByUserLoginIdentity(userLoginIdentity: string | undefined): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/GetUserByUserLoginIdentity?";
        if (userLoginIdentity === null)
            throw new Error("The parameter 'userLoginIdentity' cannot be null.");
        else if (userLoginIdentity !== undefined)
            url_ += "UserLoginIdentity=" + encodeURIComponent("" + userLoginIdentity) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserByUserLoginIdentity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserByUserLoginIdentity(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processGetUserByUserLoginIdentity(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto>(null as any);
    }

    /**
     * @param email (optional) 
     * @param tacCode (optional) 
     * @return Success
     */
    verifyConfirmationByEmail(email: string | undefined, tacCode: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/UserGrpcClient/VerifyConfirmationByEmail?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (tacCode === null)
            throw new Error("The parameter 'tacCode' cannot be null.");
        else if (tacCode !== undefined)
            url_ += "TacCode=" + encodeURIComponent("" + tacCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyConfirmationByEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyConfirmationByEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processVerifyConfirmationByEmail(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

export class AuthenticateModel implements IAuthenticateModel {
    userLoginIdentity: string;
    password: string;
    rememberClient: boolean;
    twoFactorPin: string | undefined;
    emailTacCode: string | undefined;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userLoginIdentity = _data["userLoginIdentity"];
            this.password = _data["password"];
            this.rememberClient = _data["rememberClient"];
            this.twoFactorPin = _data["twoFactorPin"];
            this.emailTacCode = _data["emailTacCode"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userLoginIdentity"] = this.userLoginIdentity;
        data["password"] = this.password;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorPin"] = this.twoFactorPin;
        data["emailTacCode"] = this.emailTacCode;
        return data;
    }

    clone(): AuthenticateModel {
        const json = this.toJSON();
        let result = new AuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateModel {
    userLoginIdentity: string;
    password: string;
    rememberClient: boolean;
    twoFactorPin: string | undefined;
    emailTacCode: string | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: string;
    requireTwoFactorPin: boolean;
    twoFactorPin: number | undefined;
    requireEmailTacCode: boolean;
    emailTacCode: number | undefined;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.userId = _data["userId"];
            this.requireTwoFactorPin = _data["requireTwoFactorPin"];
            this.twoFactorPin = _data["twoFactorPin"];
            this.requireEmailTacCode = _data["requireEmailTacCode"];
            this.emailTacCode = _data["emailTacCode"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        data["requireTwoFactorPin"] = this.requireTwoFactorPin;
        data["twoFactorPin"] = this.twoFactorPin;
        data["requireEmailTacCode"] = this.requireEmailTacCode;
        data["emailTacCode"] = this.emailTacCode;
        return data;
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: string;
    requireTwoFactorPin: boolean;
    twoFactorPin: number | undefined;
    requireEmailTacCode: boolean;
    emailTacCode: number | undefined;
}

export class AuthenticateResultModelResponseDto implements IAuthenticateResultModelResponseDto {
    isSuccess: boolean;
    result: AuthenticateResultModel;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IAuthenticateResultModelResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? AuthenticateResultModel.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): AuthenticateResultModelResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModelResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): AuthenticateResultModelResponseDto {
        const json = this.toJSON();
        let result = new AuthenticateResultModelResponseDto();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModelResponseDto {
    isSuccess: boolean;
    result: AuthenticateResultModel;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class BooleanResponseDto implements IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IBooleanResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"];
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): BooleanResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): BooleanResponseDto {
        const json = this.toJSON();
        let result = new BooleanResponseDto();
        result.init(json);
        return result;
    }
}

export interface IBooleanResponseDto {
    isSuccess: boolean;
    result: boolean;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class CreateOtpDto implements ICreateOtpDto {
    email: string;
    type: OtpType;

    constructor(data?: ICreateOtpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CreateOtpDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOtpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["type"] = this.type;
        return data;
    }

    clone(): CreateOtpDto {
        const json = this.toJSON();
        let result = new CreateOtpDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOtpDto {
    email: string;
    type: OtpType;
}

export class CreateTwoFactorAuthDto implements ICreateTwoFactorAuthDto {
    userId: string;
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;

    constructor(data?: ICreateTwoFactorAuthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.twoFactorSecretKey = _data["twoFactorSecretKey"];
            this.twoFactorQrImgUrl = _data["twoFactorQrImgUrl"];
        }
    }

    static fromJS(data: any): CreateTwoFactorAuthDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTwoFactorAuthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["twoFactorSecretKey"] = this.twoFactorSecretKey;
        data["twoFactorQrImgUrl"] = this.twoFactorQrImgUrl;
        return data;
    }

    clone(): CreateTwoFactorAuthDto {
        const json = this.toJSON();
        let result = new CreateTwoFactorAuthDto();
        result.init(json);
        return result;
    }
}

export interface ICreateTwoFactorAuthDto {
    userId: string;
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;
}

export class Empty implements IEmpty {

    constructor(data?: IEmpty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Empty {
        data = typeof data === 'object' ? data : {};
        let result = new Empty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }

    clone(): Empty {
        const json = this.toJSON();
        let result = new Empty();
        result.init(json);
        return result;
    }
}

export interface IEmpty {
}

export class LoginResultDto implements ILoginResultDto {
    result: LoginResultType;
    user: UserDto;

    constructor(data?: ILoginResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LoginResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }

    clone(): LoginResultDto {
        const json = this.toJSON();
        let result = new LoginResultDto();
        result.init(json);
        return result;
    }
}

export interface ILoginResultDto {
    result: LoginResultType;
    user: UserDto;
}

export enum LoginResultType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class OtpDto implements IOtpDto {
    id: number;
    email: string | undefined;
    tacCode: string | undefined;
    type: OtpType;

    constructor(data?: IOtpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.tacCode = _data["tacCode"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): OtpDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["tacCode"] = this.tacCode;
        data["type"] = this.type;
        return data;
    }

    clone(): OtpDto {
        const json = this.toJSON();
        let result = new OtpDto();
        result.init(json);
        return result;
    }
}

export interface IOtpDto {
    id: number;
    email: string | undefined;
    tacCode: string | undefined;
    type: OtpType;
}

export class OtpDtoIEnumerableResponseDto implements IOtpDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: OtpDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IOtpDtoIEnumerableResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(OtpDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): OtpDtoIEnumerableResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpDtoIEnumerableResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): OtpDtoIEnumerableResponseDto {
        const json = this.toJSON();
        let result = new OtpDtoIEnumerableResponseDto();
        result.init(json);
        return result;
    }
}

export interface IOtpDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: OtpDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class OtpDtoPagedListResponseDto implements IOtpDtoPagedListResponseDto {
    isSuccess: boolean;
    result: OtpDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IOtpDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(OtpDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): OtpDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): OtpDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new OtpDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface IOtpDtoPagedListResponseDto {
    isSuccess: boolean;
    result: OtpDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class OtpDtoResponseDto implements IOtpDtoResponseDto {
    isSuccess: boolean;
    result: OtpDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: IOtpDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? OtpDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): OtpDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): OtpDtoResponseDto {
        const json = this.toJSON();
        let result = new OtpDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IOtpDtoResponseDto {
    isSuccess: boolean;
    result: OtpDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export enum OtpType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class RolesDto implements IRolesDto {
    id: string;
    name: string | undefined;

    constructor(data?: IRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): RolesDto {
        const json = this.toJSON();
        let result = new RolesDto();
        result.init(json);
        return result;
    }
}

export interface IRolesDto {
    id: string;
    name: string | undefined;
}

export class RolesProtoDto implements IRolesProtoDto {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IRolesProtoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RolesProtoDto {
        data = typeof data === 'object' ? data : {};
        let result = new RolesProtoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): RolesProtoDto {
        const json = this.toJSON();
        let result = new RolesProtoDto();
        result.init(json);
        return result;
    }
}

export interface IRolesProtoDto {
    id: string | undefined;
    name: string | undefined;
}

export class TwoFactorAuthDto implements ITwoFactorAuthDto {
    id: string;
    userId: string;
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;

    constructor(data?: ITwoFactorAuthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.twoFactorSecretKey = _data["twoFactorSecretKey"];
            this.twoFactorQrImgUrl = _data["twoFactorQrImgUrl"];
        }
    }

    static fromJS(data: any): TwoFactorAuthDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorAuthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["twoFactorSecretKey"] = this.twoFactorSecretKey;
        data["twoFactorQrImgUrl"] = this.twoFactorQrImgUrl;
        return data;
    }

    clone(): TwoFactorAuthDto {
        const json = this.toJSON();
        let result = new TwoFactorAuthDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorAuthDto {
    id: string;
    userId: string;
    twoFactorSecretKey: string | undefined;
    twoFactorQrImgUrl: string | undefined;
}

export class TwoFactorAuthDtoIEnumerableResponseDto implements ITwoFactorAuthDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: ITwoFactorAuthDtoIEnumerableResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(TwoFactorAuthDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): TwoFactorAuthDtoIEnumerableResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorAuthDtoIEnumerableResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): TwoFactorAuthDtoIEnumerableResponseDto {
        const json = this.toJSON();
        let result = new TwoFactorAuthDtoIEnumerableResponseDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorAuthDtoIEnumerableResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class TwoFactorAuthDtoPagedListResponseDto implements ITwoFactorAuthDtoPagedListResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: ITwoFactorAuthDtoPagedListResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(TwoFactorAuthDto.fromJS(item));
            }
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): TwoFactorAuthDtoPagedListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorAuthDtoPagedListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): TwoFactorAuthDtoPagedListResponseDto {
        const json = this.toJSON();
        let result = new TwoFactorAuthDtoPagedListResponseDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorAuthDtoPagedListResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto[] | undefined;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class TwoFactorAuthDtoResponseDto implements ITwoFactorAuthDtoResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;

    constructor(data?: ITwoFactorAuthDtoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.result = _data["result"] ? TwoFactorAuthDto.fromJS(_data["result"]) : <any>undefined;
            this.displayMessage = _data["displayMessage"];
            if (Array.isArray(_data["errorMessages"])) {
                this.errorMessages = [] as any;
                for (let item of _data["errorMessages"])
                    this.errorMessages.push(item);
            }
        }
    }

    static fromJS(data: any): TwoFactorAuthDtoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorAuthDtoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["displayMessage"] = this.displayMessage;
        if (Array.isArray(this.errorMessages)) {
            data["errorMessages"] = [];
            for (let item of this.errorMessages)
                data["errorMessages"].push(item);
        }
        return data;
    }

    clone(): TwoFactorAuthDtoResponseDto {
        const json = this.toJSON();
        let result = new TwoFactorAuthDtoResponseDto();
        result.init(json);
        return result;
    }
}

export interface ITwoFactorAuthDtoResponseDto {
    isSuccess: boolean;
    result: TwoFactorAuthDto;
    displayMessage: string | undefined;
    errorMessages: string[] | undefined;
}

export class UserDto implements IUserDto {
    id: string;
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    passWord: string;
    passwordSalt: string | undefined;
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    isActive: boolean;
    isLockedOut: boolean;
    readonly displayName: string | undefined;
    roles: RolesDto[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.passWord = _data["passWord"];
            this.passwordSalt = _data["passwordSalt"];
            this.kycApprovedDate = _data["kycApprovedDate"] ? DateTime.fromISO(_data["kycApprovedDate"].toString()) : <any>undefined;
            this.isKYCApproved = _data["isKYCApproved"];
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isEmailVerified = _data["isEmailVerified"];
            this.isPhoneVerified = _data["isPhoneVerified"];
            this.isActive = _data["isActive"];
            this.isLockedOut = _data["isLockedOut"];
            (<any>this).displayName = _data["displayName"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles.push(RolesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["passWord"] = this.passWord;
        data["passwordSalt"] = this.passwordSalt;
        data["kycApprovedDate"] = this.kycApprovedDate ? this.kycApprovedDate.toString() : <any>undefined;
        data["isKYCApproved"] = this.isKYCApproved;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isEmailVerified"] = this.isEmailVerified;
        data["isPhoneVerified"] = this.isPhoneVerified;
        data["isActive"] = this.isActive;
        data["isLockedOut"] = this.isLockedOut;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data;
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    id: string;
    firstName: string;
    lastName: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string | undefined;
    passWord: string;
    passwordSalt: string | undefined;
    kycApprovedDate: DateTime | undefined;
    isKYCApproved: boolean;
    isTwoFactorEnabled: boolean;
    isEmailVerified: boolean;
    isPhoneVerified: boolean;
    isActive: boolean;
    isLockedOut: boolean;
    displayName: string | undefined;
    roles: RolesDto[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}